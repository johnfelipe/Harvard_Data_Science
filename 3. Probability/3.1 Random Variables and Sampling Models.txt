
Random Variables

random variables: numeric outcomes resulting from a random process

In the example of red and blue beads, we can generate a random variable like this if we define x to be 1 if a bead is 
blue and red otherwise:
> beads <- rep( c("red","blue"), times = c(2,3))
> X <- ifelse(sample(beads, 1) == "blue", 1, 0)

X changes everytime:
> ifelse(sample(beads, 1) == "blue", 1, 0)
[1] 0
> ifelse(sample(beads, 1) == "blue", 1, 0)
[1] 1
> ifelse(sample(beads, 1) == "blue", 1, 0)
[1] 1


Statistical inference offers a framework for being able to quantify the uncertainty introduced by randomness.

-------------------------------------------------------------------------------------------------------------

Sampling Models

Sampling models are ubiquitous in data science. You draw your group at random.

Suppose a casino hires you to consult on whether they should set up a roulette wheel.  They want to know if they can
make money off it or if it's too risky and they might lose.
Let's assume that 1000 people will play and the only game you can play is to bet on red or black.
How much money will they win/lose?
They want a range of values that are possible and what is the chance of losing money?

let's defined a random variable S as the casino's total winnings.

A roulette wheel has 18 red pockets, 18 black pockets and 2 green ones.

> color <- rep(c("Black","Red", "Green"), c(18, 18, 2))

if red comes up, the gambler wins and the casino loses $1, so we draw a negative 1.
Otherwise, the casino wins $1 and we draw a 1.

> n <- 1000
> X <- sample(ifelse(color=="red", -1, 1), n, replace=TRUE)

Here are the first 10 outcomes
> X[1:10]
[1] 1 -1 -1 -1 1 1 -1 1 1 1

Because we know the proportions of 1's and negative 1's, we can generate the draws with one line of code, without
defining color:
> X <- sample(c(-1,1), n, replace = TRUE, prob=c(9/19, 10/19))

This approache is called a sampling model.
The total winnings, S, is the sum of these 1000 draws.
> S <- sum(X)
> S
[1] 346

If you run this over and over again, S changes every time because S is a random variable.

probability distribution of a random variable: probability of the observed value falling in any given interval.

So if we want to know the probability that we lose money, then we ask what is the probability that S is in the 
interval S less than 0?

We can define a commutative distribution function
F(a) = Pr(S <= a)

F is called the random variable's "distribution function".

We can use a Monte Carlo simulation to generate many random variables, with 1000 people and run this experiment
10000 times.
> n <- 1000
> B <- 10000
> S <- replicate(B, {
+	X <- sample(c(-1,1),n, replace = TRUE, prob=c(9/19, 10/19))
+	sum(X)
+ })

So how often did we get sums smaller or equal to a?
> mean(S <= a)

we can create a histogram showing f(b) - f(a) for several intervals ab.

So how often was S smaller than 0?
> mean(S <0)
[1] 0.046

Very low, histogram also shows it's approximately normal. QQ plot will confirm that the normal approximation is
close to perfect.


If, in fact, the distribution is normal, then all we need to define is the distribution's average and standard 
deviation.  And since we have the values, we can compute these.
> mean(S)
[1] 52.5386
> sd(S)
[1] 31.74741


If we add a normal density with this average and standard deviation to the histogram we created earlier, 
we see that it matches very well.
> s <- seq(min(S), max(S), length = 100)
> normal_density <= data.frame(s = s, f=dnorm(s, mean(S), sd(S)))
> data.frame(S=S) %>% ggplot(aes(S, ..density..)) +
+	geom_histogram(color="black", binwidth = 10)
+	ylab(Probability") +
+	geom_line(data = normal_density,mapping=aes(s,f), color="blue")

This average and this standard deviation have special names.
They are referred to as the "expected value" and the "standard error" of the random variable S.


In our example, (S + n)/2 follows what is known as binormal distribution.
Binomial distribution - distribution of a random variable defined as independent draws from an urn

We therefore do not need to run Monte Carlo simulations,
nor use the normal approximation, to know the probability distribution of S.


--------------------------------------------------------------------------------------------------------

Distributions verses Probability Distributions

Let's note the important distinction and connection between the 
distribution of a list of numbers, which we covered in our data visualization module,
and 
a probability distribution, which we're talking about here.

distribution of a list of numbers:
F(a) : what proportion of the list is less than or equal to a?

probability distribution - we do not need a list of numbers, it's a theoretical concept.
F(a) : what is the probability that X is less than or equal to a?

There is no list of numbers. However, if x is defined by drawing from an urn with numbers in it, then there is a list,
the list of numbers inside the urn.  In this case, the distribution of x and the average and standard deviation
of that list are the expected value and standard errors of the random variable.

If we run the Monte Carlo simulation with outcomes of x, these outcomes are a list of numbers.  The distribution
of this list will be a very good approximation of the PROBABILITY DISTRIBUTION of x.
The longer the list, the better the approximation.
The average and standard deviation of this list
will approximate the expected value and standard error of the random variable.

----------------------------------------------------------------------------------------------------------------

Notation for random variables

In statistical textbooks, capital letters are used to denote random variables and lower case letters are used
for observed values.  You'll see some notation that includes both.

X <= x

X is a random variable, making it a random event.
x is an arbitrary value and not random.

for example

X is the number on a die roll
x is an actual value we see

In this case, Pr(X = x) = 1/6, regardless of the value of little x.

Note that this notation is a bit strange, because we ask questions about probability,
since big x is not an observed quantity.I nstead, it's a random quantity that we will see in the future.


-------------------------------------------------------------------------------------------------------------

Assessment

1.
An American roulette wheel has 18 red, 18 black, and 2 green pockets. Each red and black pocket is associated with a number from 1 to 36. The two remaining green slots feature "0" and "00". Players place bets on which pocket they think a ball will land in after the wheel is spun. Players can bet on a specific number (0, 00, 1-36) or color (red, black, or green).
What are the chances that the ball lands in a green pocket?
Define a variable p_green as the probability of the ball landing in a green pocket.
Print the value of p_green.
# The variables `green`, `black`, and `red` contain the number of pockets for each color
green <- 2
black <- 18
red <- 18

# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green/(green+black+red)

# Print the variable `p_green` to the console
p_green



2.
In American roulette, the payout for winning on green is $17. This means that if you bet $1 and it lands on green, you get $17 as a prize.
Create a model to predict your winnings from betting on green.
Use the sample function return a random value from a specified range of values.
Use the prob = argument in the sample function to specify a vector of probabilities for returning each of the values contained in the vector of values being sampled.
# Use the `set.seed` function to make sure your answer matches the expected result after random sampling.
set.seed(1)

# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18

# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)

# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1 - p_green

#Create a model to predict the random variable `X`, your winnings from betting on green.
X <- sample(c(-1, 17),1, replace = TRUE, prob=c(324/1444, p_green))

# Print the value of `X` to the console
X


3.
In American roulette, the payout for winning on green is $17. This means that if you bet $1 and it lands on green, you get $17 as a prize.In the previous exercise, you created a model to predict your winnings from betting on green.
Now, compute the expected value of X, the random variable you generated previously.
Using the chances of winning $17 (p_green) and the chances of losing $1 (p_not_green), calculate the expected outcome of a bet that the ball will land in a green pocket.
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18

# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)

# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green

# Calculate the expected outcome if you win $17 if the ball lands on green and you lose $1 if the ball doesn't land on green
17*p_green + -1*p_not_green


4.
The standard error of a random variable X tells us the difference between a random variable and its expected value. You calculated a random variable X in exercise 2 and the expected value of that random variable in exercise 3.
Now, compute the standard error of that random variable, which represents a single outcome after one spin of the roulette wheel.
Compute the standard error of the random variable you generated in exercise 2, or the outcome of any one spin of the roulette wheel.
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18

# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)

# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green

# Compute the standard error of the random variable
abs(-1 - 17) * sqrt(p_not_green*p_green)

5.
You modeled the outcome of a single spin of the roulette wheel, X, in exercise 2.
Now create a random variable S that sums your winnings after betting on green 1,000 times.
Use set.seed to make sure the result of your random operation matches the expected answer for this problem.
Specify the number of times you want to sample from the possible outcomes.
Use the sample function to return a random value from a vector of possible values.
Be sure to assign a probability to each outcome and to indicate that you are sampling with replacement.
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18

# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)

# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green

# Use the `set.seed` function to make sure your answer matches the expected result after random sampling
set.seed(1)

# Define the number of bets using the variable 'n'
n <- 1000

# Create a vector called 'X' that contains the outcomes of 1000 samples
X <- sample(c(-1, 17),n, replace = TRUE, prob=c(p_not_green, p_green))

# Assign the sum of all 1000 outcomes to the variable 'S'
S <- sum(X)

# Print the value of 'S' to the console
S



6.
In the previous exercise, you generated a vector of random outcomes, S, after betting on green 1,000 times.
What is the expected value of S?
Using the chances of winning $17 (p_green) and the chances of losing $1 (p_not_green), calculate the expected outcome of a bet that the ball will land in a green pocket over 1,000 bets.
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18

# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)

# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green

# Define the number of bets using the variable 'n'
n <- 1000

# Calculate the expected outcome of 1,000 spins if you win $17 when the ball lands on green and you lose $1 when the ball doesn't land on green
X <- sample(c(-1, 17),n, replace = TRUE, prob=c(p_not_green, p_green))
17*p_green*1000 + -1*p_not_green*1000



7.
You generated the expected value of S, the outcomes of 1,000 bets that the ball lands in the green pocket, in the previous exercise.
What is the standard error of S?
Compute the standard error of the random variable you generated in exercise 5, or the outcomes of 1,000 spins of the roulette wheel.
# The variables 'green', 'black', and 'red' contain the number of pockets for each color
green <- 2
black <- 18
red <- 18

# Assign a variable `p_green` as the probability of the ball landing in a green pocket
p_green <- green / (green+black+red)

# Assign a variable `p_not_green` as the probability of the ball not landing in a green pocket
p_not_green <- 1-p_green

# Define the number of bets using the variable 'n'
n <- 1000

# Compute the standard error of the sum of 1,000 outcomes
sqrt(1000) * abs(-1 - 17) * sqrt(p_not_green*p_green)



