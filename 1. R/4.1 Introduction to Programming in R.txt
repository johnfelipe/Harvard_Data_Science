Introduction to Programming in R

4.2 Basic Conditions

if-else statement:
to print the recipical of a
>a <- 2
>if (a!= 0) {
	print(1/a)
 } else {
 	print("No reciprocal for 0.")
 }
 [1] 0.5


which states, if any, have murder rates lower than 0.5.  
If the smaller state has a murder rate less than 0.5, print out the name of that state.
>ind <- which.min(murder_rate)
>if(murder_rate[ind] < 0.5) {
	print(murders$state[ind])
 } else {
 	print("No state has murder rate that low")
 }
 [1] "Vermont"


ifelse function:
ifelse a bigger than zero return the reciprocal, otherwise return the missing data.
>a <- 0
>ifelse(a >0, 1/a, NA)
[1] NA

>a <- c(0,1,2,-4,5)
>result <- ifelse(a >0, 1/a, NA)


>data(na_example)
Find the number of NA's in this vector
>sum(is.na(na_example)
[1] 145
Find no NA
>no_nas <- ifelse(is.na(na_example), 0, na_example)
>sum(is.na(no_nas))

ANY function: takes a vector of logicals and it returns true if any of the entries is true
>z <- c(TRUE, TRUE, FALSE)
>any(z)
[1] TRUE
>z <- c(FALSE, FALSE, FALSE)
>any(z)
[1] FALSE

ALL function: take a vector of logiclas and returns TRUE if all the entries are true
>z <- c(TRUE, TRUE, FALSE)
>all(z)
[1] FALSE
>z <- c(TRUE, TRUE, TRUE)
>all(z)
[1] TRUE


4.3 FUNCTIONS
>avg <- function(x) {
	s <- sum(x)
	n <- length(x)
	s/n
}
>x <- 1:100
>avg(x)
[1] 50.5
>identical(mean(x), avg(x))
[1] TRUE

return either the arithmetic mean or geometric mean
>avg <- function(x, arithmetic=TRUE){
	n <- length(x)
	ifelse(arithmetic, sum(x)/n, prod(x)^1/n))
}


4.4 For Loops

1 + 2 + ... + n = (n(n+1))/2

how to check if above is true:
>compute_s_n <- function(n){
	x <- 1:n
	sum(x)
 }
>computer_s_n(3)
[1] 6
>computer_s_n(100)
[1] 5050
>computer_s_n(2017)
[1] 2035153

what if we want to find this:
n = 1, ..., 25
>for(i in 1:5){
	print(i)
 }
 
>i
[1] 5

>m <- 25
># create an empty vector
  s_n <- vector(length = m)
>for(n in 1:m){
  s_n[n] <- computer_s_n(n)
 }

check to see if we did this right
>n <- 1:m
plot(n, s_n)

we can also overlay the two results using the function lines
>plot(n, s_n)
>lines(n, n*(n+1)/2)



4.4 OTHER FUNCTIONS
Functions that are typically used instead of for loops in R are the apply family:
apply, sapply, tapply, mapply

Other useful functions are:
split, cut, quantile, reduce, identical, unique

These advance functions will not be covered in this course but are important and you should look it up.


The function nchar tells you how many characters long a character vector is.
>char_len <- nchar(murders$state)
>head(char_len)

Some datasets use the number -999 to denote NA. A bad practice! You can convert the -999 in a vector to 
NA using the following:
>x <- c(2, 3, -999, 1, 4, 5, -999, 3, 2, 9)
>ifelse(x == -999, NA, x)

# Assign the state abbreviation when the state name is longer than 8 characters 
new_names <- ifelse(nchar(murders$state) > 8, murders$abb, murders$state)


# Create function called `sum_n`
sum_n <- function(n){
  x <- 1:100
  sum(x)
}

# Use the function to determine the sum of integers from 1 to 5000
sum_n(5000)


# Create `altman_plot` 
altman_plot <- function(x,y) {
  plot(x+y, y-x)
}


# Here is an example of function that adds numbers from 1 to n
example_func <- function(n){
    x <- 1:n
    sum(x)
}

# Here is the sum of the first 100 numbers
example_func(100)

# Write a function compute_s_n that with argument n and returns of 1 + 2^2 + ...+ n^2
compute_s_n <- function(n){
  x <- 1:n
  sum(x^2)
}

# Report the value of the sum when n=10
compute_s_n(10)



# Define a function and store it in `compute_s_n`
compute_s_n <- function(n){
  x <- 1:n
  sum(x^2)
}

# Create a vector for storing results
s_n <- vector("numeric", 25)

# write a for-loop to store the results in s_n
for(n in 1:25){
  s_n[n] <- compute_s_n(n)
  }



# Define the function
compute_s_n <- function(n){
  x <- 1:n
  sum(x^2)
}

# Define the vector of n
n <- 1:25

# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
  s_n[i] <- compute_s_n(i)
}

#  Create the plot 
plot(n, s_n)


# Define the function
compute_s_n <- function(n){
  x <- 1:n
  sum(x^2)
}

# Define the vector of n
n <- 1:25

# Define the vector to store data
s_n <- vector("numeric", 25)
for(i in n){
  s_n[i] <- compute_s_n(i)
}

# Check that s_n is identical to the formula given in the instructions.
identical(s_n, n*(n+1)*(2*n +1)/6)
