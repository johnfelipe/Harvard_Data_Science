
dplyr

Better summaries can be achieved by splitting data into groups before using the normal approximation.
ie, in our heights dataset, we describe the height of men and women separately.

> library(tidyverse)
> data(heights)

To compute the average and SD for males
> s <- heights %>%
+	filter(sex == "Male") %>%
+	summarize(average = mean(height), standard_deviation = sd(height))
> s
 	average	standard_deviation
1	69.3	3.61

since s is a dataframe, we can use the accessor dollar sign:
> s$average
[1] 69.3

We can compute any summary that operates on vectors and returns a single value:
> heights %>%
+	filter(sex == "Male") %>%
+	summarize(median = median(height),
+		minimum = min(height),
+		maximum = max(height))

We can actually get the three numbers in just one line of code using quantile functions, but if we use it
inside a summarize function, we get an error:
> heights %>%
+	filter(sex == "Male") %>%
+	summarize(range = quantile(height, c(0, 0.5, 1)))
Error in summarise_impl(.data, dots) :
	Column 'range' must be length 1 (a summary value), not 3
	
-------------------------------------------------------------------------------------------------------------

dot placeholder

how to use dplyr functions return vectors as opposed to data frames.
Previously:
> data(murders)
> murders <- murders %>% mutate(murder_rate = total/population*100000)

To get the average of the state murder rates:
> summarize(murders, mean(murder_rate))
	mean(murder_rate)
1	2.78

This is not the US murder rate, which is closer to 3. This is because in this computation we're counting the
small states just the same as the large states, and when we compute the averate US murder rate, it needs to take
into account bigger states more than smaller states.

The US murder rate is proportional to the total US murders divided by the total US population.
So the correct computation is:
> us_murder_rate <- murders %>%
+	summarize(rate = sum(total) / sum(population) * 100000)
> us_murder_rate
	rate
1	3.03


If we write this, we get a numeric value:
> us_murder_rate %>% .$rate
[1] 3.03


To get a number from the original data table with one line of code:
> us_murder_rate <- murders %>%
+	summarize(rate = sum(total) / sum(population) * 100000) %>%
+	.$rate

this returns the numeric value, not the data table.

-------------------------------------------------------------------------------------------------------------

Group then summarize


> heights %>% group_by(sex)

this is now a special data frame called a "group data frame"

dplyr functions will act different on this object.


> heights %>%
+	group_by(sex) %>%
+	summarize(average = mean(height), standard_deviation = sd(height))
# A tribble: 2 x 3
	sex	average	standard_deviation
	<fctr>	<dbl>	<dbl>
1	Female	64.9	3.76
2	Male	69.3	3.61


to computer the median murder rate in the four regions
> murders %>%
+	group_by(region) %>%
+	summarize(median_rate = median(murder_rate))
# A tribble: 4x2
	region		media_rate
	<fctr>		<dbl>
1	Northeast	1.80
2	South		3.40
3	North Central	1.97
4	West		1.29


-------------------------------------------------------------------------------------------------------------

Sorting table

We have learned order and sort functions, but for ordering entire tables, the function Arrange in dplyr, is 
very useful.

We order the states by their population size:
> murders %>% arrange(population) %>% head()

to sort by desc
> murders %>% arrange(desc(murder_rate)) %>% head()

Nested sorting
> murders %>% arrange(region, murder_rate) %>% head()

top_n
> murders %>% top_n(10, murder_rate)

> murders %>% arrange(desc(murder_rate)) %>% top_n(10)


-------------------------------------------------------------------------------------------------------------

Assessment

To practice our dplyr skills we will be working with data from the survey collected by the United States National 
Center for Health Statistics (NCHS). This center has conducted a series of health and nutrition surveys since the 
1960’s.

Starting in 1999, about 5,000 individuals of all ages have been interviewed every year and then they complete the 
health examination component of the survey. Part of this dataset is made available via the NHANES package which 
can be loaded this way:

library(NHANES)
data(NHANES)
The NHANES data has many missing values. Remember that the main summarization function in R will return NA if any 
of the entries of the input vector is an NA. Here is an example:

library(dslabs)
data(na_example)
mean(na_example)
sd(na_example)
To ignore the NAs, we can use the na.rm argument:

mean(na_example, na.rm = TRUE)
sd(na_example, na.rm = TRUE)
Try running this code, then let us know you are ready to proceed with the analysis.



Let's explore the NHANES data. We will be exploring blood pressure in this dataset.

First let's select a group to set the standard. We will use 20-29 year old females. Note that the category is 
coded with 20-29, with a space in front of the 20! The AgeDecade is a categorical variable with these ages.

To know if someone is female, you can look at the Gender variable.

Filter the NHANES dataset so that only 20-29 year old females are included and assign this new data frame to 
the object tab.
Use the pipe to apply the function filter, with the appropriate logicals, to NHANES.
Remember that this age group is coded with 20-29, which includes a space. You can use head to explore the NHANES 
table to construct the correct call to filter.

library(dplyr)
library(NHANES)
data(NHANES)
## fill in what is needed
tab <- NHANES %>% filter(Gender=="female" & AgeDecade == " 20-29")



Now we will compute the average and standard deviation for the subgroup we defined in the previous exercise 
(20-29 year old females), which we will use reference for what is typical.

You will determine the average and standard deviation of systolic blood pressure, which are stored in the 
BPSysAve variable in the NHANES dataset.
Complete the line of code to save the average and standard deviation of systolic blood pressure as average and 
standard_deviation to a variable called ref.
Use the summarize function after filtering for 20-29 year old females and connect the results using the pipe %>%. 
When doing this remember there are NAs in the data!
library(dplyr)
library(NHANES)
data(NHANES)
## complete this line of code.
NHANES
ref <- NHANES %>% filter(AgeDecade == " 20-29" & Gender == "female") %>% 
summarize(average=mean(BPSysAve, na.rm = TRUE), standard_deviation = sd(BPSysAve, na.rm=TRUE))



Now we will repeat the exercise and generate only the average blood pressure for 20-29 year old females. For 
this exercise, you should review how to use the place holder . in dplyr.
Modify the line of sample code to assign the average to a numeric variable called ref_avg.
library(dplyr)
library(NHANES)
data(NHANES)
## modify the code we wrote for previous exercise.
ref_avg <- NHANES %>%
  filter(AgeDecade == " 20-29" & Gender == "female") %>%
  summarize(average = mean(BPSysAve, na.rm = TRUE), 
            standard_deviation = sd(BPSysAve, na.rm=TRUE)) %>% .$average
            
            
            

Let's continue practicing by calculating two other data summaries: the minimum and the maximum.
Again we will do it for the BPSysAve variable and the group of 20-29 year old females.
Report the min and max values for the same group as in the previous exercises.
Use filter and summarize connected by the pipe %>% again. The functions min and max can be used to get the 
values you want.
Within summarize, save the min and max of systolic blood pressure as min and max.
library(dplyr)
library(NHANES)
data(NHANES)
## complete the line
NHANES %>%
      filter(AgeDecade == " 20-29"  & Gender == "female") %>%
summarize(min=min(BPSysAve, na.rm=TRUE), max=max(BPSysAve, na.rm=TRUE))




Now let's practice using the group_by function.

What we are about to do is a very common operation in data science: you will split a data table into 
groups and then compute summary statistics for each group.

We will compute the average and standard deviation of systolic blood pressure for females for each age 
group separately. Remember that the age groups are contained in AgeDecade.
Use the functions filter, group_by, summarize, and the pipe %>% to compute the average and standard deviation of 
systolic blood pressure for females for each age group separately.
Within summarize, save the average and standard deviation of systolic blood pressure (BPSysAve) as average and 
standard_deviation.
library(dplyr)
library(NHANES)
data(NHANES)
##complete the line with group_by and summarize
NHANES %>%
      filter(Gender == "female") %>% group_by(AgeDecade) %>% summarize(average=mean(BPSysAve, na.rm=TRUE), 
      standard_deviation=sd(BPSysAve, na.rm=TRUE))
      
      
      
      
Now let's practice using group_by some more. We are going to repeat the previous exercise of calculating the 
average and standard deviation of systolic blood pressure, but for males instead of females.

This time we will not provide much sample code. You are on your own!

Calculate the average and standard deviation of systolic blood pressure for males for each age group 
separately using the same methods as in the previous exercise.
library(dplyr)
library(NHANES)
data(NHANES)
NHANES %>%
      filter(Gender == "male") %>% group_by(AgeDecade) %>% summarize(average=mean(BPSysAve, na.rm=TRUE), 
      standard_deviation=sd(BPSysAve, na.rm=TRUE))
      
      
      
      
We can actually combine both of these summaries into a single line of code. This is because group_by permits 
us to group by more than one variable.

We can use group_by(AgeDecade, Gender) to group by both age decades and gender.   
Create a single summary table for the average and standard deviation of systolic blood pressure using 
group_by(AgeDecade, Gender).
Note that we no longer have to filter!
Your code within summarize should remain the same as in the previous exercises.

library(NHANES)
data(NHANES)
NHANES %>% group_by(AgeDecade, Gender) %>% summarize(average=mean(BPSysAve, na.rm=TRUE), 
standard_deviation=sd(BPSysAve, na.rm=TRUE))





Now we are going to explore differences in systolic blood pressure across races, as reported in the Race1 variable.

We will learn to use the arrange function to order the outcome acording to one variable.

Note that this function can be used to order any table by a given outcome. Here is an example that arranges by 
systolic blood pressure.

NHANES %>% arrange(BPSysAve)
If we want it in descending order we can use the desc function like this:

NHANES %>% arrange(desc(BPSysAve))
In this example, we will compare systolic blood pressure across values of the Race1 variable for males between 
the ages of 40-49.

Compute the average and standard deviation for each value of Race1 for males in the age decade 40-49.
Order the resulting table from lowest to highest average systolic blood pressure.
Use the functions filter, group_by, summarize, arrange, and the pipe %>% to do this in one line of code.
Within summarize, save the average and standard deviation of systolic blood pressure as average and standard_deviation.

library(dplyr)
library(NHANES)
data(NHANES)
NHANES %>% filter(Gender == "male" & AgeDecade==" 40-49") %>% group_by(Race1) %>% summarize(average=mean
(BPSysAve, na.rm=TRUE), standard_deviation=sd(BPSysAve, na.rm=TRUE)) %>% arrange(average)
