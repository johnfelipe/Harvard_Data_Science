
Faceting

Faceting variables: we stratify (classify) the data by some variable and make the same plot for each strata.

facet_grid() - this function lets you facet by up to two variables using columns to represent one variable and rows 
to represent the other.

> filter(gapminder, year == 1962) %>%
+ 	ggplot(aes(fertility, life_expenctancy, color = continent)) +
+	geom_point() +
+	facet_grid(continent~year)

contient will be in the rows and year will be in the columns

This is more than what we want. We just want one variable.  we use the dot to let the facet function know
that we're not using two variables, but just one.

> filter(gapminder, year == 1962) %>%
+ 	ggplot(aes(fertility, life_expenctancy, color = continent)) +
+	geom_point() +
+	facet_grid(.~year)

If we want to see more years (1970, 1980, 1990, 2000), we will not want all the plots on the same row, which is the 
default behavior of facet_grid. 
Use facet_wrap() to plots across different rows and columns.

> years <- c(1962, 1980, 1990, 2000, 20212)
> contients <- c("Europe", "Asia")
> gapminder %>%
+	filter(year %in% years 7 continent %in% continents) %>%
+	ggplot(aes(fertility, life_expectancy, col = continent)) +
+	geom_point() +
+	facet_wrap(~year)


Note, when not using facet, the range of the axes is dtermined by the data shown in the plot.
when using facet, the range is determined by the data shown in all plots.  And therefore, it's kept fixed across
the plots.



-----------------------------------------------------------------------------------------------------

Time Series Plots

how about improvements for these countries throughout time?

Time series plots have time in the x-axis and an outcome (or measurement of interest) on the y-axis.

geom_line instead of geom_points to create curves

> gapminder %>% filter(country == "United States") %>%
+ ggplot(aes(year, fertility)) +
+ geom_line()

This is helpful when you have more than one countries.
> countries <- c("South Korea","Germany")
> gapminder %>% filter(country %in% countries) %>%
+ ggplot(aes(year, fertility, group = country)) +
+ geom_line()

To add color:
> countries <- c("South Korea","Germany")
> gapminder %>% filter(country %in% countries) %>%
+ ggplot(aes(year, fertility, col = country)) +
+ geom_line()

Labels are preferred over legends.

> labels <- data.frame(country = countries, x = c(1975,1965), y = c(60,72))
> gapminder %>% filter(country %in% countries) %>%
+	ggplot(aes(year, life_expectancy, col=country)) +
+	geom_line() +
+	geom_text(data labels, aes(x, y, label = county), size = 5) +
+	theme(legend.position="none")

-----------------------------------------------------------------------------------------------------

Transformations

GDP (Gross Domestic Product) - measures the market value of goods and services produced by a country in a given year.
The GDP per person is often used as a rough summary of how rich a country is.

Here we divide this quantity by 365 to obtain the more interpretable measure dollars per day.
Use current US dollors as a unit, a person surviving on an income of less than $2 a day, for example, is defined
to be living in absolute proverty.

Add this to the table:
> gapminder <- gapminder %>% + mutate(dollars_per_day = gdp/population/365)

Histogram of per day incomes from 1970:
> past_year <- 1970
> gapminder %>%
+	filter(year == past_year & !is.na(gdp)) %>%
+	ggplot(aes(dollars_per_day)) +
+	geom_histogram(binwidth = 1, color = "black")

For the majority of the countries, averages are below $10 per day.

It might be more informative to quickly be able to see how many countries make on average about $1 a day,
extremely poor--
$2 a day, very poor--
$4 a day, poor--
$8 a day, which is about middle--
$16 a day which is a well-off country--
$32 is rich, and $64 which is very rich.

These changes are multiplicative.

Log transformation change multiplicative changes into additive ones.
Use base 2 for example means that every time a value doubles, the log transformation increases by one.

> gapminder %>%
+	filter(year == past_year & !is.na(gdp)) %>%
+	ggplot(aes(log2(dollars_per_day))) +
+	geom_histogram(binwidth = 1, color = "black")

Now we see two clear bumps.  In statistics, these are referred to as modes.  
The mode of a distribution is the value with the highest frequency.
The mode of a normal distribution is the average.

When a distribution doesn't monotonically decrease from the mode, we call the location where it goes up 
and down again as local modes and we say the distribution has multiple modes.

How do we chose the base? In general, we do not recommend using the natural log for data exploration
in visualization.  It's because while we know what 2 to the 2 is--
2 to the 3--
2 to do the 4, we can quickly compute that in our mind.
10 to the 1, 10 to the 2, 10 to the 3-- also very easy to compute.
It's not easy to compute E to the 2, E to the 3, et cetera.
We used base 2 instead of base 10 because the resulting range is easier to interpret.

With log base 2, we know that a bin width of 1 will translate to bins with range x to 2 to the x.


There are two ways to use log transformation in plots:
We can log the values before plotting them or we can use log scales in the axis.


Let's transformation data while plotting it, not before:
> gapminder %>%
+	filter(year == past_year & !is.na(gdp)) %>%
+	ggplot(aes(dollars_per_day)) +
+	geom_histogram(binwidth = 1, color = "black")
+	scale_x_continuous(trans = "log2")

Now we see original values in the scale.


-----------------------------------------------------------------------------------------------------

Stratify and Boxplot

To see distributions by geographical region, we first stratify the data into regions, and then examine the
distribution for each.

> length(levels(gapminder$region))
[1] 22

Histogram or smooth densities for each will not be useful, instead we use stack box plot next to each other:
> p <- gapminder %>%
+	filter(year == past_year & !is.na(gdp)) %>%
+	ggplot(aes(region, dollars_per_day))
> p + geom_boxplot()

No room for labels, we can rotate the label. This justifies the text so that it's next to the axis.
> p + geom_boxplot() +
+	theme(axis.text.x  = element_text(angel=90, hjust = 1)


reorder() : instead of ordering alphabetically, order by numeric vector

> fac <- factor(c("Asia", "Asia", "West","West", "West"))
> levels(fac)
[1]	"Asia"	"West"
Changing this vector to factor, the levels order this alphabetically by default.

> value <- c(10,11,12,6,4)
Let's order the levels based on the mean value of these numbers.
> fac <- reorder(fac, value, FUN = mean)
> levels(fac)
[1]	"West"	"Asia"

Back to our example, reorder the regions by their median income level.

> p <- gapminder %>%
+	filter(year == past_year & !is.na(gdp)) %>%
+	mutate(region = reorder(region, dollars_per_day, FUN = median)) %>%
+	ggplot(aes(region, dollars_per_day, fill = continent)) +
+ 	geom_boxplot() +
+	theme(axis.text.x  = element_text(angel=90, hjust = 1) +
+	xlab("")
> p 


Another thing we can change is to log2 scale:
> p + scale_y_continuous(trans = "log2")


We can also add a layer of points:
> p + scale_y_continuous(trans = "log2") + geom_point(show.legend = FALSE)



-----------------------------------------------------------------------------------------------------

Comparing Distribution

Now we define a vector that defines the regions in the West
> west <- c("Western Europe", "Northern Europe", "Southern Europe", "Northern America", "Australia and New Zealand")

use ifelse and use facet_grid() to make histogram for each group:
> p <- gapminder %>%
+	filter(year == past_year & !is.na(gdp)) %>%
+	mutate(group = ifelse(region%in%west, "West", "Developing") %>%
+	ggplot(aes(dollars_per_day)) +
+	geom_histogram(binwidth = 1, color = "black") +
+	scale_x_continuous(trans = "log2") +
+	facet_grid(. ~ group)

Compare to present year:
> past_year <- 1970
> present_year <- 2010
> gapminder %>%
+	filter(year %in% c(past_year, present_year) & !is.na(gdp)) %>%
+	mutate(group = ifelse(region%in%west, "West", "Developing") %>%
+	ggplot(aes(dollars_per_day)) +
+	geom_histogram(binwidth = 1, color = "black") +
+	scale_x_continuous(trans = "log2") +
+	facet_grid(year ~ group)

But there were countries in 2010 not in 1970 (ie, Soviet Union because many countries, or just more data)
Lets remake the plots using only countries with data available for both years:
> country_list_1 <- gapminder %>%
+	filter(year == past_year & !is.na(dollars_per_day)) %>% .$country
> country_list_2 <- gapminder %>%
+	filter(year == present_year & !is.na(dollars_per_day)) %>% .$country
> country_list <- intersect(country_list_1, country_list_2)

> gapminder %>%
+	filter(year %in% c(past_year, present_year) & country %in% country_list) %>%
+	mutate(group = ifelse(region%in%west, "West", "Developing") %>%
+	ggplot(aes(dollars_per_day)) +
+	geom_histogram(binwidth = 1, color = "black") +
+	scale_x_continuous(trans = "log2") +
+	facet_grid(year ~ group)

Let's do this in boxplot from before but adding 2010:
> p <- gapminder %>%
+	filter(year %in% c(past_year, present_year) & country %in% country_list %>%
+	mutate(region = reorder(region, dollars_per_day, FUN = median)) %>%
+	ggplot() +
+	theme(axis.text.x  = element_text(angel=90, hjust = 1) +
+	xlab("") + scale_y_continuous(trans = "log2")
> p + geom_boxplot(aes(region, dollars_per_day, fill = continent)) +
+ 	facet_grid(year~.)

But now the boxplots are on top of each other instead of side by side.

Ease comparsons

we ask ggplot to color the box block depending on the year. ggplot automatically separates them and puts the
two box plots next to each other. 
Because year is a number, we turn it into a factor so that each is a category, so ggplot can assign a color.
> p + geom_boxplot(aes(region, dollars_per_day, fill = factor(year)))

-----------------------------------------------------------------------------------------------------

Density Plots

Now try a succinct (concise) way with one plot.
In 1970 we see two clear modes, poor and rich.  In 2010 we see poorer countries have shifted towards the right,
closing the gap.
We need to convey that the reason for this is poor countries became richer, not rich countries becoming poorer.

Let's look at the country groups:
> gapminder %>%
+	filter(year == past_year & country %in% country_list) %>%
+	mutate(group = ifelse(region %in% west, "West", "Developing")) %>% group_by(group) %>%
+	summarize(n=n()) %>% knitr::kable()

|group		|	n|
|:--------------|-------:|
|Developing     |      87|
|West		|      21|

If we overlay the two densities, the default is to have the area represented by each distribution add up to 1,
regardless of the size of each group.  This is incorrect.

To have the areas of the densities be proportional to the size of the groups, we can multiply the y-axis values 
by the size of the group.  This can be done with geom_density() which creates count that does this.

We want this variable to be on the y-axis rather than the density value.  This is done with dot dot.
> aes(x = dollars_per_day, y = ..count..)
* x -> dollers_per_day
* y -> ..count..

> p <- gapminder %>%
+	filter(year %in% c(past_year, present_year) & country %in% country_list %>%
+	mutate(group = ifelse(region %in% west, "West", "Developing")) %>%
+	ggplot(aes(dollars_per_day, y = ..count.., fill = group)) +
+	scale_x_continuous(trans = "log2")
> p + geom_density(alpha = 0.2) + facet_grid(year~.)

to make this smoother:
> p + geom_density(alpha = 0.2, bw=0.75) + facet_grid(year~.)


To alter the plot the show key regions separately: case_when
Because this does not have a data argument, we need to use a dot placeholder to get our data.
> gapminder <- gapminder %>%
+	mutate(group = case_when(
+		.$region %in% west ~ "West",
+		.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
+		.$region %in% c("Caribbean", "Central America", "South America") ~ "Latin America",
+		.$continent == "Africa" & .$region != "Northern Africa" ~ "Sub-Saharan Africa",
+		TRUE ~ "Others"))

Now let's turn this into a factor to control the order of the levels:
> gapminder <- gapminder %>%
+	mutate(group = factor(group, levels = c("Others", "Latin America", "East Asia",
+		"Sub-Saharan Africa", "West)))


The plot is a bit hard to read, so let's stack
> p + geom_density(alpha = 0.2, bw = 0.75, position = "stack") + facet_grid(year ~ .)

We can weight the population, ie China has large population
> p <- gapminder %>%
+	filter(year %in% c(past_year, present_year) & country %in% country_list %>%
+	group_by(year) %>%
+	mutate(weight = population/sum(population) * 2) %>%
+	ungroup() %>%
+	ggplot(aes(dollars_per_day, fill = group, weight = weight)) +
+	scale_x_continuous(trans = "log2")
+	geom_density(alpha = 0.2, bw = 0.75, position = "stack") + facet_grid(year ~ .)

-----------------------------------------------------------------------------------------------------

Ecological Fallacy

Focus on country child survival rates and average income. We start by comparing these quantities across regions.

First we find the regions:
> gapminder <- gapminder %>%
+	mutate(group = case_when(
+		.$region %in% west ~ "West",
+		.$region %in% "Northern Africa" ~ "Northern Africa",
+		.$region %in% c("Eastern Asia", "South-Eastern Asia") ~ "East Asia",
+		.$region == "Souther Asia" ~ "Southern Asia",
+		.$region %in% c("Caribbean", "Central America", "South America") ~ "Latin America",
+		.$continent == "Africa" & .$region != "Northern Africa" ~ "Sub-Saharan Africa",
+		.$region %in% c("Melanesia", "Micronesia","Polynesia") ~ "Pacific Islands"))

Then we compute the quantities for each region, we'll compute the average:
> surv_income <- gapminder %>%
+	filter(year %in% present_year & !is.na(gdp) & !is.na(infant_mortality) & !is.na(group)) %>%
+	group_by(group) %>%
+	summarize(income = sum(gdp)/sum(population)/365,
+		infant_survival_rate = 1 - sum(infant_mortality/1000*population)/sum(population))
> surv_income %>% arrange(income)

This shows the two variables is almost perfectly linear.


limit argument let us chnage the range of the axis
> surv_income %>% ggplot(aes(income, infant_survival_rate, label = group, color = group)) +
+	scale_x_continuous(trans = "log2", limit = c(0.25, 150)) +
+	scale_y_continuous(trans = "logit", limit = c(0.875m .9981),
+		breaks = c(.85,.90,.95,.99,.995,.998)) +
+	geom_label(size = 3, show.legend = FALSE)

breaks let us set the location of the axis labels.

logistic transformation or logit transformation for a proportional rate p is :
f(p) = log(p/(1-p))

when p is a proportion or probability, the quantity that is being logged, p divided by 1 minus p, is called the odds.
odds = p/(1-p)

In this case, p is the proportion of children that survive.  The odds tells us how many more children are expected to 
survive than to die.

The log transformation make this quantity symmetric.  If the rates are the same, then the log odds is 0.


We want a survival rate of 99.9 percent.
99.9/0.1 is 10x larger than 99/1, which is 10x larger than 90/10
999 > 99 > 9

By using the log, these fold changes turn into constant increases.

Ecological fallacy - jumping into the conclusion from the plot that shows only the averages.

If we show all the countries, it shows different survival rates.

-----------------------------------------------------------------------------------------------------

Assessment

1.
Using ggplot and the points layer, create a scatter plot of life expectancy versus fertility for the African 
continent in 2012.
Remember that you can use the R console to explore the gapminder dataset to figure out the names of the columns 
in the dataframe.
In this exercise we provide parts of code to get you going. You need to fill out what is missing. But note that 
going forward, in the next exercises, you will be required to write most of the code.

library(dplyr)
library(ggplot2)
library(dslabs)
data(gapminder)
## fill out the missing parts in filter and aes
gapminder %>% filter(continent =="Africa" & year == "2012") %>%
  ggplot(aes(fertility, life_expectancy)) +
  geom_point()
  
  
2.
Note that there is quite a bit of variability in life expectancy and fertility with some African countries having 
very high life expectancies. There also appear to be three clusters in the plot.
Remake the plot from the previous exercises but this time use color to dinstinguish the different regions of Africa 
to see if this explains the clusters. Remember that you can explore the gapminder data to see how the regions of 
Africa are labeled in the dataframe!
library(dplyr)
library(ggplot2)
library(dslabs)
data(gapminder)
gapminder %>% filter(continent =="Africa" & year == "2012") %>%
  ggplot(aes(fertility,life_expectancy,color=region)) +
  geom_point()
  
3. 
While many of the countries in the high life expectancy/low fertility cluster are from Northern Africa, three 
countries are not.
Create a table showing the country and region for the African countries (use select) that in 2012 had fertility 
rates of 3 or less and life expectancies of at least 70.
Assign your result to a data frame called df.
library(dplyr)
library(dslabs)
data(gapminder)
df <- gapminder %>% filter(year==2012 & fertility <= 3 & life_expectancy >= 70
& continent == "Africa") %>% select(country, region)

4.
The Vietnam War lasted from 1955 to 1975. Do the data support war having a negative effect on life expectancy? We
will create a time series plot that covers the period from 1960 to 2010 of life expectancy for Vietnam and the 
United States, using color to distinguish the two countries. In this start we start the analysis by generating 
a table.
Use filter to create a table with data for the years from 1960 to 2010 in Vietnam and the United States.
Save the table in an object called tab.
library(dplyr)
library(dslabs)
data(gapminder)
tab <- gapminder %>% filter(year >= 1960 & year <= 2010 & country %in% c("Vietnam", "United States"))

5.
Now that you have created the data table in Exercise 4, it is time to plot the data for the two countries.
Use geom_line to plot life expectancy vs year for Vietnam and the United States. The data table is stored in tab.
Use color to distinguish the two countries.
p <- # code for your plot goes here - the data table is stored as `tab`
tab %>% ggplot(aes(year, life_expectancy, color=country)) + geom_line()
p

6.
Cambodia was also involved in this conflict and, after the war, Pol Pot and his communist Khmer Rouge took 
control and ruled Cambodia from 1975 to 1979. He is considered one of the most brutal dictators in history. 
Do the data support this claim?
Use a single line of code to create a time series plot from 1960 to 2010 of life expectancy vs year for Cambodia.
library(dplyr)
library(ggplot2)
library(dslabs)
data(gapminder)
gapminder %>% filter(year>=1960 & year <= 2010 & country=="Cambodia") %>% ggplot(aes(year, life_expectancy)) 
+ geom_line()

7.
Now we are going to calculate and plot dollars per day for African countries in 2010 using GDP data.
In the first part of this analysis, we will create the dollars per day variable.
Use mutate to create a dollars_per_day variable, which is defined as gdp/population/365.
Create the dollars_per_day variable for African countries for the year 2010.
Remove any NA values.
Save the mutated dataset as daydollars.
library(dplyr)
library(dslabs)
data(gapminder)
daydollars <- gapminder %>% mutate(dollars_per_day = gdp/population/365) 
%>% filter(year==2010 & continent=="Africa" & !is.na(dollars_per_day))


8.
Now we are going to calculate and plot dollars per day for African countries in 2010 using GDP data.
In the second part of this analysis, we will plot the smooth density plot using a log (base 2) x axis.
The dataset including the dollars_per_day variable is preloaded as daydollars.
Create a smooth density plot of dollars per day from daydollars.
Use a log (base 2) scale for the x axis.
daydollars %>% ggplot(aes(dollars_per_day)) + geom_density() + scale_x_continuous(trans="log2")


9.
Now we are going to combine the plotting tools we have used in the past two exercises to create density 
plots for multiple years.
Create the dollars_per_day variable as in Exercise 7, but for African countries in the years 1970 and 2010 this time.
Make sure you remove any NA values.
Create a smooth density plot of dollars per day for 1970 and 2010 using a log (base 2) scale for the x axis.
Use facet_grid to show a different density plot for 1970 and 2010.
library(dplyr)
library(ggplot2)
library(dslabs)
data(gapminder)
daydollars <- gapminder %>% mutate(dollars_per_day = gdp/population/365) %>% filter(year %in% c(1970,2010) & continent=="Africa" & !is.na(dollars_per_day)) 
daydollars %>% ggplot(aes(dollars_per_day)) + geom_density() + scale_x_continuous(trans="log2") + facet_grid(.~year)


10.
Now we are going to edit the code from Exercise 9 to show stacked histograms of each region in Africa.
Much of the code will be the same as in Exercise 9:
Create the dollars_per_day variable as in Exercise 7, but for African countries in the years 1970 and 2010 this time.
Make sure you remove any NA values.
Create a smooth density plot of dollars per day for 1970 and 2010 using a log (base 2) scale for the x axis.
Use facet_grid to show a different density plot for 1970 and 2010.
Make sure the densities are smooth by using bw = 0.5.
Use the fill and position arguments where appropriate to create the stacked histograms of each region.
library(dplyr)
library(ggplot2)
library(dslabs)
data(gapminder)
daydollars <- gapminder %>% mutate(dollars_per_day = gdp/population/365) %>% filter(year %in% c(1970,2010) & continent=="Africa" & !is.na(dollars_per_day)) 
daydollars %>% ggplot(aes(dollars_per_day, fill = region)) + geom_density(bw=0.5, position="stack") + scale_x_continuous(trans="log2") + facet_grid(.~year)


11.
We are going to continue looking at patterns in the gapminder dataset by plotting infant mortality rates versus 
dollars per day for African countries.
Generate dollars_per_day using mutate and filter for the year 2010 for African countries.
Remember to remove NA values.
Store the mutated dataset in gapminder_Africa_2010.
Make a scatter plot of infant_mortaility versus dollars_per_day for countries in the African continent.
Use color to denote the different regions of Africa.
library(dplyr)
library(ggplot2)
library(dslabs)
data(gapminder)
gapminder_Africa_2010 <- gapminder %>% mutate(dollars_per_day = gdp/population/365) %>% filter(year == 2010 & continent=="Africa" & !is.na(dollars_per_day)) 

# now make the scatter plot
gapminder_Africa_2010 %>% ggplot(aes(dollars_per_day, infant_mortality, color=region)) + geom_point()



12.
Now we are going to transform the x axis of the plot from the previous exercise.
The mutated dataset is preloaded as gapminder_Africa_2010.
As in the previous exercise, make a scatter plot of infant_mortaility versus dollars_per_day for countries in the African continent.
As in the previous exercise, use color to denote the different regions of Africa.
Transform the x axis to be in the log (base 2) scale.
gapminder_Africa_2010 %>% ggplot(aes(dollars_per_day, infant_mortality, color=region)) + geom_point() + scale_x_continuous(trans="log2")


13.
Note that there is a large variation in infant mortality and dollars per day among African countries.
As an example, one country has infant mortality rates of less than 20 per 1000 and dollars per day of 16, 
while another country has infant mortality rates over 10% and dollars per day of about 1.
In this exercise, we will remake the plot from Exercise 12 with country names instead of points so we can identify 
which countries are which.
The mutated dataset is preloaded as gapminder_Africa_2010.
As in the previous exercise, make a scatter plot of infant_mortaility versus dollars_per_day for countries in the African continent.
As in the previous exercise, use color to denote the different regions of Africa.
As in the previous exercise, transform the x axis to be in the log (base 2) scale.
Add a layer to display country names instead of points.
gapminder_Africa_2010 %>% ggplot(aes(dollars_per_day, infant_mortality, color=region)) + geom_point() +  
geom_text(aes(label=country), size = 5) + scale_x_continuous(trans="log2")


14.
Now we are going to look at changes in the infant mortality and dollars per day patterns African countries 
between 1970 and 2010.
Generate dollars_per_day using mutate and filter for the years 1970 and 2010 for African countries.
Remember to remove NA values.
As in the previous exercise, make a scatter plot of infant_mortaility versus dollars_per_day for countries in the African continent.
As in the previous exercise, use color to denote the different regions of Africa.
As in the previous exercise, transform the x axis to be in the log (base 2) scale.
As in the previous exercise, add a layer to display country names instead of points.
Use facet_grid to show different plots for 1970 and 2010.
library(dplyr)
library(ggplot2)
library(dslabs)
data(gapminder)
daydollars <- gapminder %>% mutate(dollars_per_day = gdp/population/365) %>% filter(year %in% c(1970,2010) & continent=="Africa" & !is.na(dollars_per_day) & !is.na(infant_mortality))
daydollars %>% ggplot(aes(dollars_per_day, infant_mortality, color=region)) + geom_point() + geom_text(aes(label=country)) + scale_x_continuous(trans="log2") + facet_grid(year~.)


