
Tidy Data

To help define tidy data, we go back to an example we showed in the data
visualization course, in which we applauded fertility data across time
for two countries-- South Korea and Germany.

To make the plot, we used this subset of the data and get writing this piece of code.

> data("gapminder")
> tidy_data <- gapminder %>%
+	filter(country %in% c("South Korea", "Germany")) %>%
+	select(country, year, fertility)
> head(tidy_data)

With the data in this format, we can quickly make the desired plot using this very simple piece of code.

> tidy_data %>%
+	ggplot(aes(year, fertility, color = country)) +
+	geom_point()



This brings us to the definition of tidy data.
Each row represents one observation and the columns
represent the different variables that we have data on for those observations.

If we go back to the original data provided by Gapminder,
we see that it does not start out tidy.
We include an example file with the data shown in this graph,
mimicking the way it was originally saved in a spreadsheet.
You can get to the file like this.

> path <- system.file("extdata", package="dslabs")
> filename <- file.path(path, "fertility-two-countries-example.csv")
> wide_data <- read_csv(filename)

After running that code, the object wide_data includes the same information as the object tidy_data,
except it is in a different format-- a wide format.
Here are the first nine columns of this wide data.

> select(wide_data, country, '1960':'1967')
# tibble: 2 x 9
country		'1960'	'1961'	'1962'	'1963'	'1964'	'1965'	'1966'	'1967'
Germany		2.41	2.44	2.47	2.49	2.49	2.48	2.44	2.37
South Korea	6.16	5.99	5.79	5.57	5.36	5.16	4.99	4.85

Let's go over two important differences between the wide and tidy formats.
1. In wide format, each row includes several observations
2. one of the variables - the year- is stored in the header.

The  plot code we introduced earlier, no longer works if we feed it the wide data.
For one, there is no year available.
So to use the tidyverse we need to wrangle this data into tidy format.


---------------------------------------------------------------------------------------------

Reshaping Data

The tidyr package includes several functions that are useful for tidying data.
This package is included in the tidy verse.

One of the most used functions in the package is gather, which converts wide data into tidy data.
gather()


We'll get to the first and second argument of gather soon,
but let's describe the third argument.
The third argument of the gather function specifies the columns that will be gathered.
The default behavior for the gather function is to gather all the columns.
So in most cases, we have to specify the columns.

In the example we've been examining, we want to gather the columns 1960, 1961, up to 2015.
Those are the column names.

Now let's explain what the first argument of the gather function does.
The first argument sets the name of the column
that will hold the variable that are currently kept in the wide data column names.
In our case, it makes sense to set the name of this column to year, but we can name it anything.

The second argument sets the column name for the column that will hold the values in the column cells.
In this case, we'll call it fertility since that's the data that is in those cells.

Know that nowhere in this file does it tell us that this is fertility data.
We know this from the file name.
This is not the best way to store data but it's the way this data was given to us.

Now the gathering code looks like this.
We're going to create a new tidy data sets object, call it new underscore tidy underscore data, and now all we
do is apply the gather function to the wide data.

> new_tidy_dadta <- wide_data %>%
+	gather(year, fertility, '1960':'2015')
> head(new_tidy_data)
# A tibble: 6 x 3
country		year	fertility
Germany		1960	2.41
South Korea	1960	6.16
Germany		1961	2.44
South Korea	1961	5.99
Germany		1962	2.47
South Korea	1962	5.79

Note that the only column that was not gathered was the countries column.
That's because we asked for all the other ones to be gathered.
So a somewhat quicker way to write this code is to specify which columns not to gather,
rather than all the columns that will be gathered.
So the code will look simply like this.

> new_tidy_data <- wide_data %>%
+	gather(year, fertility, - country)

> class(tidy_data$year)
[1] "integer"
> class(new_tidy_data$year)
[1] "character"

The object looks a lot like the original tidy data we showed earlier.
There's just one minor difference.
Can you spot it?
Look at the data type for the Year column.

It's a integer in our original tidy data table.
In our new tidy data, the one we just gathered, it's a character.

The gather function assumes that column names are characters, 
so we need a bit more wrangling before we're ready to make a plot.
We need to convert this column to numbers.

We can use as numeric if we want, but the gathered function actually has an argument for that.
It's the convert argument. So the code would be like this.

> new_tidy_data <- wide_data %>%
+	gather(year, fertility, - country, convert=TRUE)
> class(new_tidy_data$year)
[1] "integer"

And once we do this, the class of the Year column is an integer.



Now, as we will see in later example, it is sometimes useful for data wrangling purposes
to convert tiny data into the wide format data.
We often, use this as an intermediate step in tidying up data.

The spread function is basically, the inverse of gather.
spread()

The first argument tells spread which variables will be used as the column names.
The second argument specifies which variables to use to fill out the cells.
So the code would look like this.

> new_wide_data <- new_tidy_data %>% spread(year,fertility)
> select(new_wide_data, country, '1960':'1967')
# A tibble: 2 x 9
country		'1960'	'1961'	'1962'	'1963'	'1964'	'1965'	'1966'	'1967'
Germany		2.41	2.44	2.47	2.49	2.49	2.48	2.44	2.37
South Korea	6.16	5.99	5.79	5.57	5.36	5.16	4.99	4.85


---------------------------------------------------------------------------------------------

Separate and Unite

Let's read a more realistic example.  This file includes two variables, life expectancy, as well as fertility.
However, the way it is stored is not tidy. And as we will explain, not optimal at all.
You can read in the data using this piece of code.

> path <- system.file("extdata", package="dslabs"
> filename <- file.path(path, "life-expectancy-and-fertility-two-countries-example.csv")
>
> raw_dat <- read_csv(filename)
> select(raw_dat, 1:5)
# A tibble: 2 x 5
country		'1960_fertility'	'1960_life_expectancy'		'1961_fertility'	'1961_life_expectancy'
Germany		2.41			69.3				2.44			69.8
South Korea	6.16			53.0				5.99			53.8


When we look at this table, we can see that it is in wide format.
Also note that there are values for two variables with the column names encoding which column represents which variable.

We can start the data wrangling with the gather function, 
but we should no longer use the column name Year for the new columns,
since it also contains the variable type. We will call it key.
That's the default of this function.

So we write this piece of code to gather the data.
And the result is not exactly what we refer to as tidy,since each observation is associated with two, not one, row.

> dat <- raw_dat %>% gather(key, value, -country)
> head(dat
# A tibble: 6 x 3
country		key			value
Germany		1960_fertility		2.41
South Korea	1960_fertility		6.16
Germany		1960_life_expectancy	69.3
South Korea	1960_life_expectancy	53.0
Germany		1961_fertility		2.44
South Korea	1961_fertility		5.99

We want to have the value from the two variables, fertility and life expectancy, as two separate columns.
The first challenge to achieve this is to separate the key column into the year and the variable type.

Note that the entries in this column separate the year from the variable name using an underscore.
You can see it here.

> dat$key[1:5]
[1] "1960_fertility"	"1960_fertility"	"1960_life_expectancy"	"1960_life_expectancy"
[5] "1961_fertility"

Encoding multiple variables in a column name is such a common problem that the reader package
includes a function to separate these columns into two or more functions.
The function is called separate.
separate()


Apart from the data, the separate function takes three arguments--
1. the name of the column to be separated
2. the names to be used for the new columns
3. the character that separates the variables

So a first attempt would be to write this piece of code.
Now, because the underscore is the default separator, we can actually simply write code like this,
without telling separate what the separator is.

> dat %>% separate(key, c("year", "variable_name"), "_")
# A tibble: 224 x 4
country		year	variable_name	value
Germany		1960	fertility	2.41
South Korea	1960	fertility	6.16
Germany		1960	life		69.3
South Korea	1960	life		53.0
Germany		1961	fertility	2.44
South Korea	1961	fertility	5.99
Germany		1961	life		69.8
South Korea	1961	life		53.8
Germany		1962	fertility	2.47
South Korea	1962	fertility	5.79
# ... with 214 more rows
Warning message:
Expected 2 pieces. Additional pieces discarded in 112 rows [3, 4, 7, 8, 11, 12, 15, 16, 19, 20, 23,
24, 27, 28, 31, 32, 35, 36, 39, 40, ...].


However, we run into a problem.
Note that we have received a warning, too many values at 112 locations,
and that the life expectancy variable is truncated to just life.
This is because the underscore is used to separate life
and expectancy in the name, not just to separate year and the variable name.

So what can we do?
We can add a third column to catch this and let the separate function know which column to fill in with missing values--
NAs, in this case-- when there is no third value.

> dat %>% separate(key, c("year", "first_variable_name", "second_variable_name"), fill = "right")
# A tibble: 224 x 4
country		year	first_variable_name	second_variable_name	value
Germany		1960	fertility		NA			2.41
South Korea	1960	fertility		NA			6.16
Germany		1960	life			expectancy		69.3
South Korea	1960	life			expectancy		53.0
Germany		1961	fertility		NA			2.44
South Korea	1961	fertility		NA			5.99
Germany		1961	life			expectancy		69.8
South Korea	1961	life			expectancy		53.8
Germany		1962	fertility		NA			2.47
South Korea	1962	fertility		NA			5.79
# ... with 214 more rows

Here, in this piece of code, we tell it to fill the column on the right.
However, if we read the separate file, we find that a better approach is to merge the last two
variables when there's an extra separation using the argument extra, like this.

> dat %>% separate(key, c("year", "variable_name"), sep = "_", extra = "merge")
# A tibble: 224 x 4
country		year	variable_name	value
Germany		1960	fertility	2.41
South Korea	1960	fertility	6.16
Germany		1960	life_expectancy	69.3
South Korea	1960	life_expectancy 53.0
Germany		1961	fertility	2.44
South Korea	1961	fertility	5.99
Germany		1961	life_expectancy	69.8
South Korea	1961	life_expectancy	53.8
Germany		1962	fertility	2.47
South Korea	1962	fertility	5.79
# ... with 214 more rows


However, we're not done yet.
We need to create a column for each variable. As we've learned, the spread function can do this.
So now, to create tidy data, we're actually using the spread function.
So we write this piece of code, and when we run it, we now get a fertility and a life expectancy column.

> dat %>% separate(key, c("year", "variable_name"), sep = "_", extra = "merge")%>%
+	spread(variable_name, value)
# A tibble: 112 x 4
country		year	fertility	life_expectancy
Germany		1960	2.41		69.3
Germany		1961	2.44		69.8
Germany		1962	2.47		70.0
Germany		1963	2.49		70.1
Germany		1964	2.49		70.7
Germany		1965	2.48		70.6
Germany		1966	2.44		70.8
Germany		1967	2.37		71.0
Germany		1968	2.28		70.6
Germany		1969	2.17		70.5


Now, it is also sometimes useful to do the inverse of separate, which is to unite two columns into one.
So although this is not an optimal approach, we could have done the following to achieve the same result.
We use separate like this, and then we use this code that unites the two columns into one.
And then we spread the columns with this code.



> dat %>% 
+	separate(key, c("year", "first_variable_name", "second_variable_name"), fill = "right") %>%
+	unite(variable_name, first_variable_name, second_variable_name, sep="_")
# A tibble: 224 x 4
country		year	variable_name		value
Germany		1960	fertility_NA		2.41
South Korea	1960	fertility_NA		6.16
Germany		1960	life_expectancy		69.3
South Korea	1960	life_expectancy		53.0
Germany		1961	fertility_NA		2.44
South Korea	1961	fertility_NA		5.99
Germany		1961	life_expectancy		69.8
South Korea	1961	life_expectancy		53.8
Germany		1962	fertility_NA		2.47
South Korea	1962	fertility_NA		5.79
# ... with 214 more rows


So this is clearly not as efficient, but it provides an example of where you would use the unite function.