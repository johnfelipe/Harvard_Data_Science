
Case Study 2: Reported Heights

In previous courses, we used a heights data set in the dslabs package.
The dslabs package also includes the raw data from which these heights were obtained.
You can load it like this.

> library(dslabs)
> data(reported_heights)


These heights were obtained using a web form in which students were asked to enter their heights into a form.
They could enter anything, but the instructions asked for heights in inches, the number.
We compiled over 1,000 submissions, but unfortunately the column vector
with the reported heights had several non-numeric entries, and as a result became a character vector.
We can see it here.

> class(reported_heights$height)
[1] "character"


If we try to parse it into a number, we get a warning.
There's a lot of NAs.

> x <- as.numeric(reported_heights$height)
Warning message:
NAs introduced by coercion

Although most values appear to be height in inches as requested-- here are the first five-- we do end up with many NAs.
> head(x)
[1] 75 70 68 74 61 65

>sum(is.na(x)
[1] 81

We can see some of the entries that are not successfully converted by using the filter function to keep only the entries that
resulted in NAs. We can write this code.

> reported_heights %>% mutate(new_height = as.numeric(height)) %>%
+	filter(is.na(new_height)) %>%
+	head(n=10)

We immediately see what's happening.
Some of the students did not report their heights in inches as requested.
We could discard these and continue, however, many of the entries
follow patterns that, in principle, we can easily convert to inches.

For example, in the output we just saw, we see various cases that use the following format, with x representing
feet and y representing inches.
x'y"

Each of these cases can be read and converted to inches by a human.
For example, if you write 5'4" like this, this is 5 times 12 plus 4, which is 64 inches.

So we could fix all the problematic entries by hand. However, humans are prone to making mistakes.
Also, because we plan on continuing to collect data going forward, 
it'll be convenient to write code that automatically does this.


A first step in this type of task is to survey the problematic entries
and try to define specific patterns followed by a large group of entries.
The larger these groups, the more entries we can fix with a single programmatic approach.

We want to find patterns that can be accurately described
with a rule, such as a digit followed by a feet symbol followed by one
or two digits followed by an inches symbol.

To look for such patterns, it helps to remove the entries that are consistent with being inches,
and view only the problematic entries.
We write a function to automatically do this.
We only keep entries that either result in NAs when applying as numeric or are outside a range of plausible heights.


We permit a range that covers about 99.99999% of the adult population.
We also use suppressWarnings() throughout the code to avoid the warning messages we know the as.numeric will give us.
So here is what the function looks like.

> not_inches <- function(x, smallest = 50, tallest = 84){
+	inches <- surpressWarnings(as.numeric(x))
+	ind <- is.na(inches) | inches < smallest | inches > tallest
+	ind
+ 	}

We apply this function, and find that there are these many entries that are problematic.

> problems <- reported_heights %>%
+	filter(not_inches(height)) %>%
+	.$height
> length(problems)
[1] 292


We can now view all the cases by simply printing them.
We don't do that here because there are so many of them.
But after surveying them carefully, we notice three patterns that are followed by three large groups of entries.

A pattern of the form x feet y or x feet space y inches or x feet
y backslash inches, and with x and y representing feet and inches respectively, is a common pattern.
1. x'y or x'y" or x'y\"

Here are 10 examples.

> pattern <- "^\\d\\s*'\\s*\\d{1,2}\\.*\\d*'*\"*$"
> str_subset(problems, pattern) %>% head(n=10) %>% cat
5' 4" 5'7 5'7" 5'3" 5'11 5'9'' 5'10'' 5' 10 5'5" 5'2"


A pattern of the form x dot y or x comma y, with x feet and y inches, are also common.
2. x.y or x,y

Here are 10 examples.

> pattern <- "^[4-6]\\s*[\\.|,]\\s*([0-9]|10|11)$"
> str_subset(problems, pattern) %>% head(n=10) %>% cat
5.3 5.5 6.5 5.8 5.6 5,3 5.9 6,8 5.5 6.2

Entries that were reported in centimeters rather than inches is another example.
3. reported in centimeters

Here are 10 of them.

> ind <- which(between(supressWarnings(as.numeric(problems))/2.54,54,81) )
> ind <- ind[!is.na(ind)]
> problems[ind] %>% head(n=10) %>% cat
150 175 177 178 163 175 178 165 165 180

--------------------------------------------------------------------------------------------------


Regex

We have seen three patterns that define many problematic entries.
We will convert entries fitting the first two patterns into a standardized one.
We'll then leverage this standardization to extract the feet and inches, and convert to inches.
We will then define a procedure for identifying entries that are in centimeters, and convert these to inches.

After applying these steps, we will then check again
to see what entries were not fixed, and see if we can tweak our approach to be more comprehensive.
This is very common in data science.

There's a lot of interactive approaches that are applied.
At the end, we hope to have a script that makes web-based data collection methods robust to the most common user
mistakes. To achieve our goal, we will use a technique that enables us to actually detect patterns, and extract
these parts we want-- regular expressions or regex.

A regular expression, a regex, is a way to describe specific patterns of a character of text that
can be used to determine if a given string matches the pattern.
A set of rules have been defined to do this efficiently and precisely, and we're going to show you some examples.

The patterns applied to the stringr functions can be a regex, rather than a standard string.
We'll learn how this works through a series of examples. Technically, any string is a regex.

Perhaps the simplest example is a single character.
So the comma that we used before-- here is the code-- is a simple example of searching with a regex.
> pattern <- ","
> str_detect(murders_raw$total, pattern)
[1] FALSE FALSE FALSE FALSE TRUE FALSE FALSE FALSE


We noted that an entry included centimeters, cm. This is also a simple example of a regex.
We can show all the entries that use "cm" like this. We use the function str_subset.

> str_subset(reported_heights$height, "cm")
[1] "165cm" "170 cm"


Now let's consider a slightly more complicated example.
Let's ask which of the following strings satisfy your pattern.
We're going to define "yes" as the ones that do, and "no" as the ones that don't, and then
create one vector of strings, called s, including both.

> yes <- c("180 cm", "70 inches")
> no <- c("180", "70''")
> s <- c(yes, no)

So we're asking which of the strings include the pattern "cm" or the pattern "inches."
We could call str_detect twice, like this.

> str_detect(s, "cm" | str_detect(s, "inches")
[1] TRUE TRUE FALSE FALSE

However, we don't need to do this. 
The main feature that distinguishes the regex language from plain strings is that we can use special characters.
These are characters that have a meaning.

We start by introducing this character | , which means "or."
So if you want to know if either "cm" or "inches" appears in the, string
we can use the regex bar inches, like this, and obtain the correct answer.

> str_detect(s, "cm|inches")
[1] TRUE TRUE FALSE FALSE


Another special character that will be useful for identifying feet and inches
values is the backslash d, which means any digit, 0, 1, 2, 3, up to 9.
\d
any digit: 0,1,2,3,4,5,6,7,8,9

The backslash is used to distinguish it from the character "d."
In R, we have to escape the backslash, so we actually have to use two backslashes, and then a d to represent digits.
\\d


Here's an example.
We're going to define several strings, some that satisfy a pattern, others that don't.
And now we're going to look for a pattern that has a digit in it.

> yes <- c("5", "6", "5'10", "5 feet", "4'11")
> no <- c("",".", "Five", "six")
> s <- c(yes,no)
> pattern <- "\\d"
> str_detect(s, pattern)
[1] TRUE TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE

We're going to find five strings that have digits in them, four strings that don't.
Then we're going to use the regex backslash d to try to find which of these strings have the pattern.
If we use str_detect, we see that we actually get the right answer, five trues followed by four falses.


We take this opportunity to introduce the very useful str_view function.
This is a helpful function for troubleshooting, as it shows us the first match for each string.
So if we type str_view (s, and then the pattern, it shows us the first time a digit was found.

> str_view(s, pattern)
5
6
5'10
5 feet
4'11
.
Five
six

The str_view_all shows us all the matches.
So if we use it here, we can see that all the digits are highlighted.

> str_view_all(s, pattern)
5
6
5'10
5 feet
4'11
.
Five
six

------------------------------------------------------------------------------------------------


Character Classes, Anchors, and Qualifiers

As we've done already throughout these videos, you'll see that we create strings to test our regex.
To do this, we define patterns that we know should match the pattern that we're testing, and some that we know 
should not.

We'll call them "yes" and "no" respectively.

This permits us to check for the two types of errors, failing to match
and incorrectly matching.

Character classes are used to define a series of characters that can be matched.
We define character classes with the square brackets.
[]
So for example, if we want the parent to match only if we have a 5 or a 6,
we can use the regex, square brackets, 5, 6.
So we test it out, you can see that we only detect the 5s and the 6s.
You can see it with string view.

> str_view(s, "[56]")


Suppose we want to match values between 4 and 7.
A common way to define a character class is with ranges.
So for example, if we use the brackets and then 0 through 9, this is equivalent to using the backlash d.
It's all the digits.

[0-9]
\\d

So the pattern square brackets 4 to 7 will match the numbers 4, 5, 6, and 7.
We can see it in this example.
[4-7]

> yes <- as.character(4:7)
> no <- as.character(1:3)
> s <- c(yes,no)
< str_detect(s, "[4-7]")
[1] TRUE TRUE TRUE TRUE FALSE FALSE FALSE


However, it is important to know that in regex, everything is a character.
There are no numbers.
So 4 is the character 4, not the number 4.
Note, for example, that if we type 1 through 20, this does not mean 1, 2, 3, 4, 5, up to 20.
It means that characters 1 through 2 and then the character 0.

[1-20]
0,1,2


So the regex 1 through 20 in brackets simply means the character class composed of 0, 1, and 2.
Note that characters do have an order and the digits do follow the numeric order.

So 0 comes before 1, which comes before 2, and so on.
For the same reason, we can define letters as ranges. So a through z are all the lower case letters
like this and A through Z uppercase are all the letters that are uppercase.
[a-z]
[A-Z]

If you want all the letters, then we would write it like this.
[a-zA-z]

What if we want the pattern to match when we have exactly one digit?
This will be useful in our case studies since feet are never more than one digit.
So a restriction will help us.

One way to do this with regex is by using anchors which let us define patterns that
must start or end at specific places.

The two most common anchors are the caret and the dollar sign, 
which represent the beginning and end of a string respectively.


^ beginning of string
$ end of string

So the pattern caret, backslash, backslash, d, dollar sign is read as start of the string followed by one digit 
followed by the end of the string.

^\\d$

start of the string 
followed by one digit 
followed by the end


Note how this pattern now only detects the strings with exactly one digit.
We can see it in this example.

> pattern <- "^\\d$"
> yes <- c("1", "5", "9")
> no <- c("12","123"," 1", "a4", "b")
> s <- c(yes,no)
> str_view(s, pattern)


Note that the 1 in the example we just show
does not match because there's a space in front, so it's not just one digit.

For the inches part, we can have one or two digits.
This can be specified in regex with quantifiers.
This is done by following the pattern by curly brackets with the possible number of times the previous entry repeats.

So the pattern for one or two digits is like this-- backslash, backslash,
d, and then curly brackets, 1 comma 2.

\\d{1,2}

So this code will do what we want. It will find all the numbers that are two digits or one digit.

> pattern <- "^\\d{1,2}$"
> yes <- c("1","5","9","12")
> no <- c("123","a4","b")
> str_view(c(yes,no), pattern)

In this case, 1, 2, 3 does not match but 1, 2 does.
So now, to look for one feet and inches pattern, we can add the symbol for feet
and the symbol for inches after the digits.

feet: '
inches: "


With what we have learned, we can now construct an example for the pattern x feet and y inches,
with the x representing feet and the y inches.
It's going to look like this.

> pattern <- "^[4-7]'\\d{1,2}\"$"

We're going to say it starts this string, then any number between 4
and 7, the other feet, then the symbol for feet,
then either one or two digits, and then the end of the string.

This pattern is now getting complex, but we can look at it carefully and break it down.
The caret means start of the string.
Brackets, 4, 7.
One digit either 4, 5, 6, or 7.
The feet symbol-- backslash, backslash d, curly brackets, 1, 2 means one
or two digits.
And then backslash quotes is the inches symbol,
and then we end with the dollar sign, which means the end of the string.

Let's test it out

> yes <- c("5'7\"", "6'2\"", "5'12\"")
> no <- c("6,2\"", "6.2\"", "I am 5'11\"", "3'2\"", 64")
> str_detect(yes, pattern)
[1] TRUE TRUE TRUE
> str_detect(no, pattern)
[1] FALSE FALSE FALSE FALSE FALSE

For now, we're permitting the inches to be 12 or larger.
We will add a restriction later as a regex for this is a bit more complex than we're ready to show now.

--------------------------------------------------------------------------------------------------------

Search and Replace with Regex

In a previous video, we defined the object problems containing the strings that do not appear to be in inches.
We can see that only these many of them match the pattern we define.

> pattern <- "^[4-7]'\\d{1,2}\"$"
> sum(str_dectect(problems, pattern))
[1] 14

To see why this is, we show examples that expose why we don't have more matches.
Here are some examples.

> problems[c(2,10,11,12,15)] %>% str_view(pattern)
5' 4"
5'7" <<
5'3" <<
5 feet and 8.11 inches
5.5

We see that only two of them match.
Why is that?

A first problem we see immediately is that some students wrote out the words feet and inches.
We can see the entries that did this with the function strict subset like this.

> str_subset(problems, "inches")

We see several examples.
We also see that some entries use the single quotes twice to represent inches instead of the double quotes.
We can see some examples using the string subset option.
Here they are.

> str_subset(problems, "''")

First thing we can do to solve this problem is to replace the different ways of representing
inches and feet with a uniform symbol.
We'll use a single quote for feet, and for inches, we'll simply not use anything.
So 5, single quote, y will mean 5 feet and y inches.
Now, if we no longer use the inches symbol at the end,
we can change our pattern accordingly by taking it out of the pattern.
So our pattern will be this then.

> pattern <- "^[4-7]'\\d{1,2}$"


If we do this replacement before the matching, we get many more matches.
So we're going to use the string replace function to replace feet, ft, foot with the feet symbol.
And we're going to replace inches in two single double quotes and slash double quotes with nothing.
We run this and now we see that we get many more matches.

> problems %>%
+	str_replace("feet|ft|foot","'") %>%
+	str_replace("inches|in|;;,\"","") %>%
+	str_detect(pattern) %>5
+	sum
[1] 48


However, we still have many cases to go.
Note that in the code we just showed, we leveraged the string consistency and use the pipe.
Another problem we have are spaces.
For example, the pattern 5, single quote, space, 4, and then the double quotes does not match because there
is a space between the single quote and the 4, which our pattern does not permit.

5' 4\"

Spaces are characters and r does not ignore them.
You can write this function to see that there are not-- that these two strings are not the same.

> identical("Hi", "Hi ")
[1] FALSE

There is a space in one and not the other.
In regex, we can represent spaces, white space, as with backslash s.

\s

So to find patterns like 5, single quote, space, and then another digit, we can change our pattern to the following.
We're adding backslash, backslash, s after the single quote.
And now, we can see that we find a few examples.

> pattern_2 <- "^[4-7]'\\s\\d{1,2}\"$"
> str_subset(problems, pattern_2)
[1] "5' 4\"" "5'11\"" "5' 7\""

So do we need more than one regex pattern-- one for the space and one without the space?
No, we don't.
We can use quantifiers for this as well.
So we want a pattern to permit spaces but not to require them.

Even if there are several spaces like this, we will still want it to match.

5'       4"

There is a quantifier exactly for this purpose.
In regex, the asterisk character means zero or more instances of the previous character.
So let's do a quick example.
We define some strings, and then we try out to see which strings we find by using the asterisk after the 1.
We see that it finds all of these and none of these.

> yes <- c("AB", "A1B", "A11B", "A111B", "A1111B")
> no <- c("A2B","A21B")
> str_detect(yes, "A1*B")
[1] TRUE TRUE TRUE TRUE TRUE
> str_detect(no, "A1*B)
[1] FALSE FALSE

Note that it matches the first string which has zero 1s and all the strings which have one or more 1s.
So we can improve our pattern by adding the asterisk after the space character backslash, s.


Now there are two other similar quantifiers.
For none or once, we can use the question mark. 
?
And for one or more, we can use the plus sign.
+
You can see how they differ by testing it out with this code.

> data.frame(string = c("AB", "A1B", "A11B", "A111B", "A1111B"),
+	none_or_more = str_detect(yes, "A1*B"),
+	none_or_once = str_detect(yes, "A1?B"),
+	once_or_more = str_detect(yes, "A1+B"),
	string		none_or_more	none_or_once	once_or_more
	AB		TRUE		TRUE		FALSE
	A1B		TRUE		TRUE		TRUE
	A11B		TRUE		FALSE		TRUE
	A111B		TRUE		FALSE		TRUE
	A1111B		TRUE		FALSE		TRUE


We will actually use all three in our report as examples as you will see later.
But right now, to improve our pattern, we can add the asterisks after the backslash, s in front
and after the feet symbol to permit space between the feet symbol and the numbers.
Now we match and we get a few more entries.
Here's the example.

> pattern <- "^[4-7]\\s*'\\s*\\d{1,2}$"
> problems %>%
+	str_replace("feet|ft|foot", "'" %>% # replace feet, ft, foot with '
+	str_replace("inches|in|''|\"","") %>% # replace all inches symbols
+	str_detect(pattern) %>%
+	sum
[1] 53


We might be tempted to avoid doing this by removing all the spaces with the function str_replace_all.
However, when doing such an operation, we need to make sure that it does not have some unintended effect.
In our reported heights example, this will be a problem because some entries are of the form x space y with space
separating the feet from the inches.
If we remove all spaces, we will incorrectly turn x space y into xy,
which implies that a 6' 1" person would turn into a 61 inch person instead of a 73 inch person.


------------------------------------------------------------------------------------------------------------

Groups with Regex

The second a large group of problematic entries were of the form x.y or x,y, and x y.
We want to change all these to our common format, x'y.
But we can't just do the search and replace, because we would change value such as 70.5 into 70'5.

Our strategy will therefore be to search for very specific pattern that assures us feet and inches are being provided.
Then for those that match, replace appropriately.

Groups are a powerful aspect of regex that permits the extraction of values.
groups()

Groups are defined using parentheses.
They don't affect the pattern matching per se.
Instead, it permits tools to identify specific parts of the pattern so we can extract them.
So, for example, we want to change height like 5.6 to 5'6.

To avoid changing patterns such as 70.2, we'll require that the first digit be between four and seven--
we can do that using the range operation-- and that the second be none or more digits.

[4-7]

We can do that using backslash, backslash d star.

\\d*

Let's start by defining a simple pattern that matches this.
We can do it like this.

> pattern_without_groups <- "^[4-7],\\d*$"


We want to extract the digits so that we can then form the new version using a single quote.
These are two groups, so we encapsulate them with parentheses like this.

> pattern_with_groups <- "^([4-7]),(\\d*)$"

Note that we encapsulate the part of the pattern that matches the parts we want
to keep, the parts we want to extract.

Before we continue, notice that adding groups
does not affect the detections since it only signals that we want to save what is captured by the groups.
We can see that by writing this code.

> pattern_with_groups <- "^([4-7]),(\\d*)$"
> yes <- c("5,9", "5,11", "6,", "6,1")
> no <- c("5'9", ",", "2,8", "6.1.1")
> s <- c(yes, no)
> str_detect(s, pattern_without_groups)
[1] TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE
> str_detect(s, pattern_with_groups)
[1] TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE


Note that the parentheses do not change the matching procedure.

Once we define groups, we can use a function str_match to extract the values these groups define, like this.

> str_match(s, pattern_with_groups)
	[,1]	[,2]	[,3]
[1,]	"5,9"	"5"	"9"
[2,]	"5,11"	"5"	"11"
[3,]	"6,"	"6"	""
[4,]	"6,1"	"6"	"1"
[5,]	NA	NA	NA
[6,]	NA	NA	NA
[7,]	NA	NA	NA
[8,]	NA	NA	NA

Look what happens if we write this code.
Note that the second and third columns contain feet and inches respectively.
The first is the original pattern that was matched.
If no match occurred, we see an N/A.


Now we can understand the difference between the function str_extract and str_match.
str_extract extracts only strings that match a pattern, not the values defined by the groups.
Here's what happens with string extract.

> str_extract(s, pattern_with_groups)
[1] "5,9" "5,11" "6," "6,1" NA NA NA NA

Another powerful aspect of groups is that you can refer to the extracted value in regex when searching and replacing.
The regex special character for the i-th group is backslash, backslash, i.

\\i
i-th group

So backslash, backslash, 1 is the value extracted from the first group,
and backslash, backslash, 2 is the value from the second group, and so on.
So as a simple example, note that the following code 
will replace a comma by a period, but only if it is between two digits.
Here's the code.

> pattern_with_groups <- "^([4-7]),(\\d*)$"
> yes <- c("5,9", "5,11", "6,", "6,1")
> no <- c("5'9", ",", "2,8", "6.1.1")
> s <- c(yes, no)
> str_replace(s, pattern_with_groups, "\\1'\\2")
[1] "5'9" "5'11" "6'" "6'1" "5'9" "," "2,8" "6.1.1"


We can use is to convert cases in our reported heights.
Now we're ready to define a pattern that helps us convert all the x.y, x,y, and x y's to our preferred format.
We need to adapt pattern underscore with groups to be a bit more flexible and capture all these cases.
The pattern now looks like this.

> pattern_with_groups <- "^([4-7])\\s*[,\\.\\s+]\\s*(\\d*)$"

Let's break this one down.
It's quite complicated.

The caret means start of the string.
Then four to seven means one digit between four and seven-- four, five, six, or seven.
Then the backslash, backslash, s, star means none or more white spaces.
The next pattern means the fifth symbol is either comma, or dot, or at least one space.
Then we have none or more white spaces again.
Then we have none or more digits, and then the end of the string.
We can see that it appears to be working.
Let's try these examples.

> str_subset(problems, pattern_with_groups) %>% head
[1] "5.3" "5.25" "5.5" "6.5" "5.8" "5.6"

And we'll be able to perform the search and replace.

> str_subset(problems, pattern_with_groups) %>% 
+	str_replace(pattern_with_groups, "\\1'\\2" %>% head
[1] "5'3" "5'25" "5'5" "6'5" "5'8" "5'6"


It almost has the desired outcome.
There's one little problem, and it's that we have one case with 25 inches.
We'll deal with this problem later.

--------------------------------------------------------------------------------


Testing and Improving


We have developed a powerful string processing technique that can help us catch many of the problematic entries.
Now, it's time to test our approach, search for further problems, and tweak our approach for possible improvements.
Let's write a function that captures all the entries that can't be converted into numbers, remembering
that some are in centimeters.
We'll deal with those later.
Here is the function.

> not_inches_or_cm <- function(x, smallest = 50, tallest = 84{
+	inches <- suppressWarnings(as.numeric(x0)
+	ind <- !is.na(inches) &
+		((inches >= smallest & inches <= tallest) |
+			(inches/2.54 > smallest & inches/2.54 <= tallest))
+	!ind
+ }
>
> problems <- reported_heights %>%
+	filter(not_inches_or_cm(height)) %>%
+	.$height
> length(problems)
[1] 200


Let's see how many of these we can make fit our pattern after the several processing steps we have developed.
Here, we leverage the pipe-- one of the advantages of using a stringer.
We use the pipe to concatenate the different replacements that we have just performed.
Then we define the pattern and then, we go and try to see how many we match.

> converted <- problems %>%
+	str_replace("feet|foot|ft", "'") %>% #convert feet symbols to '
+	str_replace("inches|in|''|\"", "") %>% #remove inches symbols
+	str_replace("^(4-7])\\s*[,\\.\\s+]\\s*(\\d*)$", "\\1'\\2") ## change format
>
> pattern <- "^[4-7]\\s*'\\s*\\d{1,2}$"
> index <- str_detect(converted, pattern)
> mean(index)
[1] 0.615

We are matching more than half now.
Let's examine the remaining cases.
Here they are.

> converted[!index]

So what are the problems?

1. Many students measuring exactly 5 or 6 feet did not enter any inches.
For example, 6' and our pattern requires that inches be included.

2. Some students measuring exactly 5 or 6 feet entered just that number.

3. Some of the inches were entered with decimal points.
For example, 5 feet and 7.5 inches.
Our pattern only looks for two digits.

4. Some entries have spaces the end.
For example, 5 ' 9 .

5. Some entries are in meters and some of these are European decimals.
So it's 1, 7 is 1.7 meter.

6. Two students added CM 

7. a student spelled out the numbers, 5 foot, 8 inches.

It is not necessarily clear that it is worth
writing code to handle all these cases since they might be rare enough.
However, some give us an opportunity to learn some more regex techniques.
So we will show you the code that you need to fix them in the course material.
